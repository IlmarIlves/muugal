/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AdminUsersFilterInput: { // input type
    email?: string | null; // String
    firstName?: string | null; // String
    lastName?: string | null; // String
    userId?: string | null; // String
  }
  MatchInput: { // input type
    conditionMode?: NexusGenEnums['ConditionModeEnum'] | null; // ConditionModeEnum
    matchMode?: NexusGenEnums['MatchModeEnum'] | null; // MatchModeEnum
  }
  PaginationInput: { // input type
    skip?: number | null; // Int
    take?: number | null; // Int
  }
}

export interface NexusGenEnums {
  ConditionModeEnum: "AND" | "OR"
  MatchModeEnum: "CONTAINS" | "EXACT" | "STARTS_WITH"
  OrderProgressStatusEnum: "PAID" | "PAYMENT" | "RECEIVED" | "SENT"
  UserRoleEnum: "ADMIN" | "BUYER" | "OFFERER" | "USER"
  UserStatusEnum: "ACTIVE" | "DEACTIVATED" | "DISABLED"
}

export interface NexusGenRootTypes {
  Admin: {};
  AdminOrder: { // root type
    additionalInfo: string; // String!
    amount: number; // Int!
    colors: string; // String!
    data: string; // String!
    email: string; // String!
    id: string; // ID!
    mimeType: string; // String!
    telephone: string; // String!
    userId: string; // ID!
  }
  AdminOrders: { // root type
    orders: NexusGenRootTypes['AdminOrder'][]; // [AdminOrder!]!
  }
  AdminPayment: { // root type
    amount: number; // Int!
    currencyCode: string; // String!
    emailUsedForPayment: string; // String!
    id: string; // ID!
    stripeSessionId: string; // String!
    userId: string; // ID!
  }
  AdminPayments: { // root type
    payments: NexusGenRootTypes['AdminPayment'][]; // [AdminPayment!]!
  }
  AdminUser: { // root type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    userRole: NexusGenEnums['UserRoleEnum'][]; // [UserRoleEnum!]!
    userStatus: NexusGenEnums['UserStatusEnum']; // UserStatusEnum!
  }
  AdminUsers: { // root type
    skip: number; // Int!
    take: number; // Int!
    total: number; // Int!
    users: NexusGenRootTypes['AdminUser'][]; // [AdminUser!]!
  }
  LoginResponse: { // root type
    accessToken: string; // String!
  }
  Mutation: {};
  Order: { // root type
    additionalInfo: string; // String!
    amount: number; // Int!
    colors: string; // String!
    data: string; // String!
    email: string; // String!
    id: string; // ID!
    mimeType: string; // String!
    telephone: string; // String!
    userId: string; // ID!
  }
  Payment: { // root type
    amount: number; // Int!
    currencyCode: string; // String!
    emailUsedForPayment: string; // String!
    id: string; // ID!
    stripeSessionId: string; // String!
    userId: string; // ID!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    userStatus: NexusGenEnums['UserStatusEnum']; // UserStatusEnum!
  }
  Viewer: { // root type
    accessToken: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Upload: Promise<FileUpload>;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AdminUsersFilterInput: NexusGenInputs['AdminUsersFilterInput'];
  MatchInput: NexusGenInputs['MatchInput'];
  PaginationInput: NexusGenInputs['PaginationInput'];
  ConditionModeEnum: NexusGenEnums['ConditionModeEnum'];
  MatchModeEnum: NexusGenEnums['MatchModeEnum'];
  OrderProgressStatusEnum: NexusGenEnums['OrderProgressStatusEnum'];
  UserRoleEnum: NexusGenEnums['UserRoleEnum'];
  UserStatusEnum: NexusGenEnums['UserStatusEnum'];
}

export interface NexusGenFieldTypes {
  Admin: { // field return type
    order: NexusGenRootTypes['AdminOrder']; // AdminOrder!
    orders: NexusGenRootTypes['AdminOrders']; // AdminOrders!
    payment: NexusGenRootTypes['AdminPayment']; // AdminPayment!
    payments: NexusGenRootTypes['AdminPayments']; // AdminPayments!
    user: NexusGenRootTypes['AdminUser']; // AdminUser!
    users: NexusGenRootTypes['AdminUsers']; // AdminUsers!
  }
  AdminOrder: { // field return type
    additionalInfo: string; // String!
    amount: number; // Int!
    colors: string; // String!
    data: string; // String!
    email: string; // String!
    id: string; // ID!
    mimeType: string; // String!
    telephone: string; // String!
    userId: string; // ID!
  }
  AdminOrders: { // field return type
    orders: NexusGenRootTypes['AdminOrder'][]; // [AdminOrder!]!
  }
  AdminPayment: { // field return type
    amount: number; // Int!
    currencyCode: string; // String!
    emailUsedForPayment: string; // String!
    id: string; // ID!
    stripeSessionId: string; // String!
    userId: string; // ID!
  }
  AdminPayments: { // field return type
    payments: NexusGenRootTypes['AdminPayment'][]; // [AdminPayment!]!
  }
  AdminUser: { // field return type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    userRole: NexusGenEnums['UserRoleEnum'][]; // [UserRoleEnum!]!
    userStatus: NexusGenEnums['UserStatusEnum']; // UserStatusEnum!
  }
  AdminUsers: { // field return type
    skip: number; // Int!
    take: number; // Int!
    total: number; // Int!
    users: NexusGenRootTypes['AdminUser'][]; // [AdminUser!]!
  }
  LoginResponse: { // field return type
    accessToken: string; // String!
  }
  Mutation: { // field return type
    adminResetUserPassword: NexusGenRootTypes['AdminUser']; // AdminUser!
    changePassword: NexusGenRootTypes['Viewer']; // Viewer!
    createStripeCheckoutSession: NexusGenRootTypes['Payment']; // Payment!
    login: NexusGenRootTypes['LoginResponse']; // LoginResponse!
    logout: boolean; // Boolean!
    order: NexusGenRootTypes['Order']; // Order!
    register: NexusGenRootTypes['User']; // User!
    updateOrderStatus: NexusGenRootTypes['User']; // User!
  }
  Order: { // field return type
    additionalInfo: string; // String!
    amount: number; // Int!
    colors: string; // String!
    data: string; // String!
    email: string; // String!
    id: string; // ID!
    mimeType: string; // String!
    telephone: string; // String!
    userId: string; // ID!
  }
  Payment: { // field return type
    amount: number; // Int!
    currencyCode: string; // String!
    emailUsedForPayment: string; // String!
    id: string; // ID!
    stripeSessionId: string; // String!
    userId: string; // ID!
  }
  Query: { // field return type
    admin: NexusGenRootTypes['Admin']; // Admin!
    viewer: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    userStatus: NexusGenEnums['UserStatusEnum']; // UserStatusEnum!
  }
  Viewer: { // field return type
    accessToken: string; // String!
  }
}

export interface NexusGenArgTypes {
  Admin: {
    order: { // args
      orderId?: string | null; // ID
      priceInCents?: number | null; // Int
    }
    payment: { // args
      paymentId?: string | null; // ID
    }
    user: { // args
      userId?: string | null; // ID
    }
    users: { // args
      filter?: NexusGenInputs['AdminUsersFilterInput'] | null; // AdminUsersFilterInput
      match?: NexusGenInputs['MatchInput'] | null; // MatchInput
      pagination?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    }
  }
  Mutation: {
    adminResetUserPassword: { // args
      userId?: string | null; // ID
    }
    changePassword: { // args
      confirmPassword?: string | null; // String
      currentPassword?: string | null; // String
      newPassword?: string | null; // String
    }
    createStripeCheckoutSession: { // args
      priceInCents?: number | null; // Int
      productName?: string | null; // String
      quantity?: number | null; // Int
    }
    login: { // args
      email?: string | null; // String
      password?: string | null; // String
    }
    order: { // args
      file?: any | null; // Upload
    }
    register: { // args
      email?: string | null; // String
      firstName?: string | null; // String
      lastName?: string | null; // String
      password?: string | null; // String
    }
    updateOrderStatus: { // args
      email?: string | null; // String
      firstName?: string | null; // String
      lastName?: string | null; // String
      userId?: string | null; // ID
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Admin" | "AdminOrder" | "AdminOrders" | "AdminPayment" | "AdminPayments" | "AdminUser" | "AdminUsers" | "LoginResponse" | "Mutation" | "Order" | "Payment" | "Query" | "User" | "Viewer";

export type NexusGenInputNames = "AdminUsersFilterInput" | "MatchInput" | "PaginationInput";

export type NexusGenEnumNames = "ConditionModeEnum" | "MatchModeEnum" | "OrderProgressStatusEnum" | "UserRoleEnum" | "UserStatusEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String" | "Upload";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}